#!/usr/bin/env python
# -*- coding: UTF-8 -*-
from __future__ import division, absolute_import, unicode_literals
import argparse
import os
import sys

sys.path.append(os.getcwd())
from cola import core
from cola.git import Git

def main():
    args = parse_args()
    git = Git()
    # We use git-subtree for QtPy, and thus include its history.
    # We only want to see the git-cola committers, so filter
    # the git log output using `sans_qtpy`
    qtpy_oid = '49a1fcf17140dd016601dd7acc0dcd7b629aa57d'
    sans_qtpy = '^' + qtpy_oid

    # If someone wants their email to be public they can add a mapping here
    emails = {
        # 'name': 'email@example.com',
        'David Aguilar': 'davvid@gmail.com',
        'Ｖ字龍(Vdragon)': 'Vdragon.Taiwan@gmail.com',
    }
    # Some committers we skip because their changes touched the
    # translations, but they're not really a translator.
    skip = set()
    if args.translators:
        default_title = 'Translation'
        titles = {
            'adlgrbz': 'Turkish translation',
            'balping': 'Hungarian translation',
            'Barış ÇELİK': 'Turkish translation',
            '林博仁(Buo-ren Lin)': 'Traditional Chinese (Taiwan) translation',
            'fu7mu4': 'Japanese translation',
            'Guo Yunhe': 'Simplified Chinese translation',
            'Gyuris Gellért': 'Hungarian translation',
            'Igor Kopach': 'Ukranian translation',
            'Joachim Lusiardi': 'German translation',
            'Mickael Albertus': 'French translation',
            'Minarto Margoliono': 'Indonesian translation',
            'Louis Rousseau': 'French translation',
            'Łukasz Wojniłowicz': 'Polish translation',
            'Kai Krakow': 'German translation',
            'p-bo': 'Czech translation',
            'Pavel Rehak': 'Czech translation',
            'Peter Dave Hello': 'Traditional Chinese (Taiwan) translation',
            'Pilar Molina Lopez': 'Spanish translation',
            'Rafael Nascimento': 'Brazilian translation',
            'Rafael Reuber': 'Brazilian translation',
            'Sabri Ünal': 'Turkish translation',
            "Samsul Ma'arif": 'Indonesian translation',
            'Shun Sakai': 'Japanese translation',
            'Sven Claussner': 'German translation',
            'Vaiz': 'Russian translation',
            'Ｖ字龍(Vdragon)': 'Traditional Chinese (Taiwan) translation',
            'Vitor Lobo': 'Brazilian translation',
            'Victorhck': 'Spanish translation',
            'Zeioth': 'Spanish translation',
            'Zhang Han': 'Simplified Chinese translation',
        }
        pathspecs = (
            'po/*.po',
            'share/doc/git-cola/hotkeys_*.html',
        )
        skip.add('Ville Skyttä')
        skip.add('Szymon Judasz')
        skip.add('David Aguilar')
    else:
        default_title = 'Developer'
        titles = {
            'David Aguilar': 'Maintainer (since 2007) and developer',
        }
        pathspecs = get_pathspecs(git, exclude=set(['.po', '.pot']))

    skip.add('dependabot[bot]')
    skip.add('OriShalhon')  # Covered by commits under a different name.
    skip.add('pre-commit-ci[bot]')
    skip.add('real')

    indent = ' ' * 8
    if args.count:
        suffix = "\t# %(count)s"
    else:
        suffix = ''

    snippet = (
        "%(indent)sdict(name=%(name_q)s, title=N_('%(title)s')),%(suffix)s")

    title_snippet = (
        "%(indent)sdict(name=%(name_q)s,\n"
        "%(indent)s     title=N_('%(title)s')),%(suffix)s")

    email_snippet = (
        "%(indent)sdict(name=%(name_q)s, title=N_('%(title)s'),\n"
        "%(indent)s     email=mailto(%(email_q)s, contact, palette)),%(suffix)s")

    title_email_snippet = (
        "%(indent)sdict(name=%(name_q)s,\n"
        "%(indent)s     title=N_('%(title)s'),\n"
        "%(indent)s     email=mailto(%(email_q)s, contact, palette)),%(suffix)s")

    committers = get_committers(git, 'HEAD', sans_qtpy, '--', *pathspecs)
    for idx, (count, name) in enumerate(committers):
        if name in skip:  # skip over maintainer and false positives
            continue
        title = titles.get(name, default_title)
        email = emails.get(name, '')
        if email:
            email_q = quote(email)
            if title != default_title:
                current_snippet = title_email_snippet
            else:
                current_snippet = email_snippet
        elif title != default_title:
            current_snippet = title_snippet
        else:
            current_snippet = snippet

        name_q = quote(name)
        core.print_stdout(current_snippet % locals())

    return 0


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--count', default=False, help='show counts',
                        action='store_true')
    parser.add_argument('--translators', default=False, help='show translators',
                        action='store_true')
    return parser.parse_args()


def quote(name):
    if "'" in name and '"' in name:
        return "'''%s'''" % name
    elif "'" in name:
        return '"%s"' % name
    else:
        return "'%s'" % name


def git_error(name, args, status, out, err):
    if out:
        core.print_stdout(out, linesep='')
    core.error('error: git %s %s returned exit status %s\n%s'
               % (name, ' '.join(args), status, err),
               status=status)


def check_error(name, args, status, out, err):
    if status != 0:
        git_error(name, args, status, out, err)


def get_pathspecs(git, exclude=()):
    status, out, err = git.ls_files()
    check_error('ls-files', (), status, out, err)

    pathspecs = set()
    pathspecs.add('**/TODO')
    pathspecs.add('TODO')

    for path in out.splitlines():
        if os.path.islink(path):
            continue
        basename = os.path.basename(path)
        if basename.startswith('.') or '.' not in basename:
            pathspecs.add('**/' + path)
            pathspecs.add(path)
        else:
            base, ext = os.path.splitext(basename)
            if ext in exclude:
                continue
            pathspecs.add('**/*' + ext)
            pathspecs.add('*' + ext)

    return list(sorted(pathspecs))


def get_committers(git, *args):
    status, out, err = git.shortlog(summary=True,
                                    numbered=True,
                                    no_merges=True,
                                    *args)
    check_error('shortlog', args, status, out, err)

    return [count_name(*(line.split('\t')))
            for line in out.splitlines()]


def count_name(count, name):
    return (int(count), name)

sys.exit(main())
